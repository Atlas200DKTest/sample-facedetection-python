# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_presenter_channel', [dirname(__file__)])
        except ImportError:
            import _presenter_channel
            return _presenter_channel
        if fp is not None:
            try:
                _mod = imp.load_module('_presenter_channel', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _presenter_channel = swig_import_helper()
    del swig_import_helper
else:
    import _presenter_channel
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _presenter_channel.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _presenter_channel.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _presenter_channel.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _presenter_channel.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _presenter_channel.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _presenter_channel.SwigPyIterator_equal(self, x)

    def copy(self):
        return _presenter_channel.SwigPyIterator_copy(self)

    def next(self):
        return _presenter_channel.SwigPyIterator_next(self)

    def __next__(self):
        return _presenter_channel.SwigPyIterator___next__(self)

    def previous(self):
        return _presenter_channel.SwigPyIterator_previous(self)

    def advance(self, n):
        return _presenter_channel.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _presenter_channel.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _presenter_channel.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _presenter_channel.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _presenter_channel.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _presenter_channel.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _presenter_channel.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _presenter_channel.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


_presenter_channel.SHARED_PTR_DISOWN_swigconstant(_presenter_channel)
SHARED_PTR_DISOWN = _presenter_channel.SHARED_PTR_DISOWN
class DRVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DRVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DRVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _presenter_channel.DRVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _presenter_channel.DRVector___nonzero__(self)

    def __bool__(self):
        return _presenter_channel.DRVector___bool__(self)

    def __len__(self):
        return _presenter_channel.DRVector___len__(self)

    def __getslice__(self, i, j):
        return _presenter_channel.DRVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _presenter_channel.DRVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _presenter_channel.DRVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _presenter_channel.DRVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _presenter_channel.DRVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _presenter_channel.DRVector___setitem__(self, *args)

    def pop(self):
        return _presenter_channel.DRVector_pop(self)

    def append(self, x):
        return _presenter_channel.DRVector_append(self, x)

    def empty(self):
        return _presenter_channel.DRVector_empty(self)

    def size(self):
        return _presenter_channel.DRVector_size(self)

    def swap(self, v):
        return _presenter_channel.DRVector_swap(self, v)

    def begin(self):
        return _presenter_channel.DRVector_begin(self)

    def end(self):
        return _presenter_channel.DRVector_end(self)

    def rbegin(self):
        return _presenter_channel.DRVector_rbegin(self)

    def rend(self):
        return _presenter_channel.DRVector_rend(self)

    def clear(self):
        return _presenter_channel.DRVector_clear(self)

    def get_allocator(self):
        return _presenter_channel.DRVector_get_allocator(self)

    def pop_back(self):
        return _presenter_channel.DRVector_pop_back(self)

    def erase(self, *args):
        return _presenter_channel.DRVector_erase(self, *args)

    def __init__(self, *args):
        this = _presenter_channel.new_DRVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _presenter_channel.DRVector_push_back(self, x)

    def front(self):
        return _presenter_channel.DRVector_front(self)

    def back(self):
        return _presenter_channel.DRVector_back(self)

    def assign(self, n, x):
        return _presenter_channel.DRVector_assign(self, n, x)

    def resize(self, *args):
        return _presenter_channel.DRVector_resize(self, *args)

    def insert(self, *args):
        return _presenter_channel.DRVector_insert(self, *args)

    def reserve(self, n):
        return _presenter_channel.DRVector_reserve(self, n)

    def capacity(self):
        return _presenter_channel.DRVector_capacity(self)
    __swig_destroy__ = _presenter_channel.delete_DRVector
    __del__ = lambda self: None
DRVector_swigregister = _presenter_channel.DRVector_swigregister
DRVector_swigregister(DRVector)

class Tlv(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Tlv, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Tlv, name)
    __repr__ = _swig_repr
    __swig_setmethods__["tag"] = _presenter_channel.Tlv_tag_set
    __swig_getmethods__["tag"] = _presenter_channel.Tlv_tag_get
    if _newclass:
        tag = _swig_property(_presenter_channel.Tlv_tag_get, _presenter_channel.Tlv_tag_set)
    __swig_setmethods__["length"] = _presenter_channel.Tlv_length_set
    __swig_getmethods__["length"] = _presenter_channel.Tlv_length_get
    if _newclass:
        length = _swig_property(_presenter_channel.Tlv_length_get, _presenter_channel.Tlv_length_set)
    __swig_setmethods__["value"] = _presenter_channel.Tlv_value_set
    __swig_getmethods__["value"] = _presenter_channel.Tlv_value_get
    if _newclass:
        value = _swig_property(_presenter_channel.Tlv_value_get, _presenter_channel.Tlv_value_set)

    def __init__(self):
        this = _presenter_channel.new_Tlv()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _presenter_channel.delete_Tlv
    __del__ = lambda self: None
Tlv_swigregister = _presenter_channel.Tlv_swigregister
Tlv_swigregister(Tlv)

class PartialMessageWithTlvs(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PartialMessageWithTlvs, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PartialMessageWithTlvs, name)
    __repr__ = _swig_repr
    __swig_setmethods__["message"] = _presenter_channel.PartialMessageWithTlvs_message_set
    __swig_getmethods__["message"] = _presenter_channel.PartialMessageWithTlvs_message_get
    if _newclass:
        message = _swig_property(_presenter_channel.PartialMessageWithTlvs_message_get, _presenter_channel.PartialMessageWithTlvs_message_set)
    __swig_setmethods__["tlv_list"] = _presenter_channel.PartialMessageWithTlvs_tlv_list_set
    __swig_getmethods__["tlv_list"] = _presenter_channel.PartialMessageWithTlvs_tlv_list_get
    if _newclass:
        tlv_list = _swig_property(_presenter_channel.PartialMessageWithTlvs_tlv_list_get, _presenter_channel.PartialMessageWithTlvs_tlv_list_set)

    def __init__(self):
        this = _presenter_channel.new_PartialMessageWithTlvs()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _presenter_channel.delete_PartialMessageWithTlvs
    __del__ = lambda self: None
PartialMessageWithTlvs_swigregister = _presenter_channel.PartialMessageWithTlvs_swigregister
PartialMessageWithTlvs_swigregister(PartialMessageWithTlvs)


_presenter_channel.PresenterErrorCode_kNone_swigconstant(_presenter_channel)
PresenterErrorCode_kNone = _presenter_channel.PresenterErrorCode_kNone

_presenter_channel.PresenterErrorCode_kInvalidParam_swigconstant(_presenter_channel)
PresenterErrorCode_kInvalidParam = _presenter_channel.PresenterErrorCode_kInvalidParam

_presenter_channel.PresenterErrorCode_kConnection_swigconstant(_presenter_channel)
PresenterErrorCode_kConnection = _presenter_channel.PresenterErrorCode_kConnection

_presenter_channel.PresenterErrorCode_kSsl_swigconstant(_presenter_channel)
PresenterErrorCode_kSsl = _presenter_channel.PresenterErrorCode_kSsl

_presenter_channel.PresenterErrorCode_kCodec_swigconstant(_presenter_channel)
PresenterErrorCode_kCodec = _presenter_channel.PresenterErrorCode_kCodec

_presenter_channel.PresenterErrorCode_kNoSuchChannel_swigconstant(_presenter_channel)
PresenterErrorCode_kNoSuchChannel = _presenter_channel.PresenterErrorCode_kNoSuchChannel

_presenter_channel.PresenterErrorCode_kChannelAlreadyOpened_swigconstant(_presenter_channel)
PresenterErrorCode_kChannelAlreadyOpened = _presenter_channel.PresenterErrorCode_kChannelAlreadyOpened

_presenter_channel.PresenterErrorCode_kServerReturnedUnknownError_swigconstant(_presenter_channel)
PresenterErrorCode_kServerReturnedUnknownError = _presenter_channel.PresenterErrorCode_kServerReturnedUnknownError

_presenter_channel.PresenterErrorCode_kBadAlloc_swigconstant(_presenter_channel)
PresenterErrorCode_kBadAlloc = _presenter_channel.PresenterErrorCode_kBadAlloc

_presenter_channel.PresenterErrorCode_kAppDefinedError_swigconstant(_presenter_channel)
PresenterErrorCode_kAppDefinedError = _presenter_channel.PresenterErrorCode_kAppDefinedError

_presenter_channel.PresenterErrorCode_kSocketTimeout_swigconstant(_presenter_channel)
PresenterErrorCode_kSocketTimeout = _presenter_channel.PresenterErrorCode_kSocketTimeout

_presenter_channel.PresenterErrorCode_kOther_swigconstant(_presenter_channel)
PresenterErrorCode_kOther = _presenter_channel.PresenterErrorCode_kOther

_presenter_channel.ContentType_kImage_swigconstant(_presenter_channel)
ContentType_kImage = _presenter_channel.ContentType_kImage

_presenter_channel.ContentType_kVideo_swigconstant(_presenter_channel)
ContentType_kVideo = _presenter_channel.ContentType_kVideo

_presenter_channel.ContentType_kReserved_swigconstant(_presenter_channel)
ContentType_kReserved = _presenter_channel.ContentType_kReserved

_presenter_channel.ImageFormat_kJpeg_swigconstant(_presenter_channel)
ImageFormat_kJpeg = _presenter_channel.ImageFormat_kJpeg

_presenter_channel.ImageFormat_kReserved_swigconstant(_presenter_channel)
ImageFormat_kReserved = _presenter_channel.ImageFormat_kReserved
class OpenChannelParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OpenChannelParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OpenChannelParam, name)
    __repr__ = _swig_repr
    __swig_setmethods__["host_ip"] = _presenter_channel.OpenChannelParam_host_ip_set
    __swig_getmethods__["host_ip"] = _presenter_channel.OpenChannelParam_host_ip_get
    if _newclass:
        host_ip = _swig_property(_presenter_channel.OpenChannelParam_host_ip_get, _presenter_channel.OpenChannelParam_host_ip_set)
    __swig_setmethods__["port"] = _presenter_channel.OpenChannelParam_port_set
    __swig_getmethods__["port"] = _presenter_channel.OpenChannelParam_port_get
    if _newclass:
        port = _swig_property(_presenter_channel.OpenChannelParam_port_get, _presenter_channel.OpenChannelParam_port_set)
    __swig_setmethods__["channel_name"] = _presenter_channel.OpenChannelParam_channel_name_set
    __swig_getmethods__["channel_name"] = _presenter_channel.OpenChannelParam_channel_name_get
    if _newclass:
        channel_name = _swig_property(_presenter_channel.OpenChannelParam_channel_name_get, _presenter_channel.OpenChannelParam_channel_name_set)
    __swig_setmethods__["content_type"] = _presenter_channel.OpenChannelParam_content_type_set
    __swig_getmethods__["content_type"] = _presenter_channel.OpenChannelParam_content_type_get
    if _newclass:
        content_type = _swig_property(_presenter_channel.OpenChannelParam_content_type_get, _presenter_channel.OpenChannelParam_content_type_set)

    def __init__(self):
        this = _presenter_channel.new_OpenChannelParam()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _presenter_channel.delete_OpenChannelParam
    __del__ = lambda self: None
OpenChannelParam_swigregister = _presenter_channel.OpenChannelParam_swigregister
OpenChannelParam_swigregister(OpenChannelParam)

class Point(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Point, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Point, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _presenter_channel.Point_x_set
    __swig_getmethods__["x"] = _presenter_channel.Point_x_get
    if _newclass:
        x = _swig_property(_presenter_channel.Point_x_get, _presenter_channel.Point_x_set)
    __swig_setmethods__["y"] = _presenter_channel.Point_y_set
    __swig_getmethods__["y"] = _presenter_channel.Point_y_get
    if _newclass:
        y = _swig_property(_presenter_channel.Point_y_get, _presenter_channel.Point_y_set)

    def __init__(self):
        this = _presenter_channel.new_Point()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _presenter_channel.delete_Point
    __del__ = lambda self: None
Point_swigregister = _presenter_channel.Point_swigregister
Point_swigregister(Point)

class DetectionResult(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DetectionResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DetectionResult, name)
    __repr__ = _swig_repr
    __swig_setmethods__["lt"] = _presenter_channel.DetectionResult_lt_set
    __swig_getmethods__["lt"] = _presenter_channel.DetectionResult_lt_get
    if _newclass:
        lt = _swig_property(_presenter_channel.DetectionResult_lt_get, _presenter_channel.DetectionResult_lt_set)
    __swig_setmethods__["rb"] = _presenter_channel.DetectionResult_rb_set
    __swig_getmethods__["rb"] = _presenter_channel.DetectionResult_rb_get
    if _newclass:
        rb = _swig_property(_presenter_channel.DetectionResult_rb_get, _presenter_channel.DetectionResult_rb_set)
    __swig_setmethods__["result_text"] = _presenter_channel.DetectionResult_result_text_set
    __swig_getmethods__["result_text"] = _presenter_channel.DetectionResult_result_text_get
    if _newclass:
        result_text = _swig_property(_presenter_channel.DetectionResult_result_text_get, _presenter_channel.DetectionResult_result_text_set)

    def __init__(self):
        this = _presenter_channel.new_DetectionResult()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _presenter_channel.delete_DetectionResult
    __del__ = lambda self: None
DetectionResult_swigregister = _presenter_channel.DetectionResult_swigregister
DetectionResult_swigregister(DetectionResult)

class ImageFrame(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageFrame, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ImageFrame, name)
    __repr__ = _swig_repr
    __swig_setmethods__["format"] = _presenter_channel.ImageFrame_format_set
    __swig_getmethods__["format"] = _presenter_channel.ImageFrame_format_get
    if _newclass:
        format = _swig_property(_presenter_channel.ImageFrame_format_get, _presenter_channel.ImageFrame_format_set)
    __swig_setmethods__["width"] = _presenter_channel.ImageFrame_width_set
    __swig_getmethods__["width"] = _presenter_channel.ImageFrame_width_get
    if _newclass:
        width = _swig_property(_presenter_channel.ImageFrame_width_get, _presenter_channel.ImageFrame_width_set)
    __swig_setmethods__["height"] = _presenter_channel.ImageFrame_height_set
    __swig_getmethods__["height"] = _presenter_channel.ImageFrame_height_get
    if _newclass:
        height = _swig_property(_presenter_channel.ImageFrame_height_get, _presenter_channel.ImageFrame_height_set)
    __swig_setmethods__["size"] = _presenter_channel.ImageFrame_size_set
    __swig_getmethods__["size"] = _presenter_channel.ImageFrame_size_get
    if _newclass:
        size = _swig_property(_presenter_channel.ImageFrame_size_get, _presenter_channel.ImageFrame_size_set)
    __swig_setmethods__["data"] = _presenter_channel.ImageFrame_data_set
    __swig_getmethods__["data"] = _presenter_channel.ImageFrame_data_get
    if _newclass:
        data = _swig_property(_presenter_channel.ImageFrame_data_get, _presenter_channel.ImageFrame_data_set)
    __swig_setmethods__["detection_results"] = _presenter_channel.ImageFrame_detection_results_set
    __swig_getmethods__["detection_results"] = _presenter_channel.ImageFrame_detection_results_get
    if _newclass:
        detection_results = _swig_property(_presenter_channel.ImageFrame_detection_results_get, _presenter_channel.ImageFrame_detection_results_set)

    def __init__(self):
        this = _presenter_channel.new_ImageFrame()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _presenter_channel.delete_ImageFrame
    __del__ = lambda self: None
ImageFrame_swigregister = _presenter_channel.ImageFrame_swigregister
ImageFrame_swigregister(ImageFrame)

class InitChannelHandler(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InitChannelHandler, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InitChannelHandler, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _presenter_channel.delete_InitChannelHandler
    __del__ = lambda self: None

    def CreateInitRequest(self):
        return _presenter_channel.InitChannelHandler_CreateInitRequest(self)

    def CheckInitResponse(self, response):
        return _presenter_channel.InitChannelHandler_CheckInitResponse(self, response)
InitChannelHandler_swigregister = _presenter_channel.InitChannelHandler_swigregister
InitChannelHandler_swigregister(InitChannelHandler)

class PresentChannelInitHandler(InitChannelHandler):
    __swig_setmethods__ = {}
    for _s in [InitChannelHandler]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PresentChannelInitHandler, name, value)
    __swig_getmethods__ = {}
    for _s in [InitChannelHandler]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PresentChannelInitHandler, name)
    __repr__ = _swig_repr

    def __init__(self, param):
        this = _presenter_channel.new_PresentChannelInitHandler(param)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def CreateInitRequest(self):
        return _presenter_channel.PresentChannelInitHandler_CreateInitRequest(self)

    def CheckInitResponse(self, response):
        return _presenter_channel.PresentChannelInitHandler_CheckInitResponse(self, response)

    def GetErrorCode(self):
        return _presenter_channel.PresentChannelInitHandler_GetErrorCode(self)
    __swig_destroy__ = _presenter_channel.delete_PresentChannelInitHandler
    __del__ = lambda self: None
PresentChannelInitHandler_swigregister = _presenter_channel.PresentChannelInitHandler_swigregister
PresentChannelInitHandler_swigregister(PresentChannelInitHandler)

class Channel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Channel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Channel, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _presenter_channel.delete_Channel
    __del__ = lambda self: None

    def Open(self):
        return _presenter_channel.Channel_Open(self)

    def SendMessage(self, *args):
        return _presenter_channel.Channel_SendMessage(self, *args)

    def ReceiveMessage(self, response):
        return _presenter_channel.Channel_ReceiveMessage(self, response)

    def GetDescription(self):
        return _presenter_channel.Channel_GetDescription(self)
Channel_swigregister = _presenter_channel.Channel_swigregister
Channel_swigregister(Channel)

class DefaultChannel(Channel):
    __swig_setmethods__ = {}
    for _s in [Channel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DefaultChannel, name, value)
    __swig_getmethods__ = {}
    for _s in [Channel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DefaultChannel, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["NewChannel"] = lambda x: _presenter_channel.DefaultChannel_NewChannel
    if _newclass:
        NewChannel = staticmethod(_presenter_channel.DefaultChannel_NewChannel)
    __swig_destroy__ = _presenter_channel.delete_DefaultChannel
    __del__ = lambda self: None

    def Open(self):
        return _presenter_channel.DefaultChannel_Open(self)

    def SendMessage(self, *args):
        return _presenter_channel.DefaultChannel_SendMessage(self, *args)

    def ReceiveMessage(self, response):
        return _presenter_channel.DefaultChannel_ReceiveMessage(self, response)

    def SetInitChannelHandler(self, handler):
        return _presenter_channel.DefaultChannel_SetInitChannelHandler(self, handler)

    def GetInitChannelHandler(self):
        return _presenter_channel.DefaultChannel_GetInitChannelHandler(self)

    def SetDescription(self, desc):
        return _presenter_channel.DefaultChannel_SetDescription(self, desc)

    def GetDescription(self):
        return _presenter_channel.DefaultChannel_GetDescription(self)
DefaultChannel_swigregister = _presenter_channel.DefaultChannel_swigregister
DefaultChannel_swigregister(DefaultChannel)

def DefaultChannel_NewChannel(host_ip, port, handler):
    return _presenter_channel.DefaultChannel_NewChannel(host_ip, port, handler)
DefaultChannel_NewChannel = _presenter_channel.DefaultChannel_NewChannel


def OpenChannel_p(param):
    return _presenter_channel.OpenChannel_p(param)
OpenChannel_p = _presenter_channel.OpenChannel_p

def PresentImage(channel, image):
    return _presenter_channel.PresentImage(channel, image)
PresentImage = _presenter_channel.PresentImage
# This file is compatible with both classic and new-style classes.


